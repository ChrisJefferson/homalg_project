##
## from change.log:
##
- added way to optionally ignore the logical subpackages
  (LRING, LIMAT, COLEM, LIMOD) by setting the global variable
  DoNotLoadLogicForHomalg to true (a warning will be issued)

##
## from read.g
##

## LogicForHomalg subpackages
if not ( IsBound( DoNotLoadLogicForHomalg ) and DoNotLoadLogicForHomalg = true ) then
    ReadPackage( "homalg", "gap/LIRNG.gi" );
    ReadPackage( "homalg", "gap/LIMAT.gi" );
    ReadPackage( "homalg", "gap/COLEM.gi" );
    ReadPackage( "homalg", "gap/LIMOD.gi" );
else
    Print( "WARNING: the subpackage LogicForHomalg was not loaded!\n" );
fi;



##
## from: HomalgGenerators.gi
##

##
InstallMethod( BasisOfModule,
        "for sets of generators of homalg modules",
        [ IsGeneratorsOfFinitelyGeneratedModuleRep and IsHomalgGeneratorsOfLeftModule ],
        
  function( gen )
    local bas;
    
    if not IsBound( gen!.BasisOfModule ) then
        gen!.BasisOfModule := BasisOfRows( MatrixOfGenerators( gen ) );
        SetCanBeUsedToDecideZeroEffectively( gen, false );
    fi;
    
    bas := HomalgGeneratorsForLeftModule( gen!.BasisOfModule, HomalgRing( gen ) );
    
    SetCanBeUsedToDecideZeroEffectively( bas, true );
    
    return HomalgRelationsForLeftModule( MatrixOfGenerators( bas ) );	## FIXME: written for \/ in Modules.gi (should become obsolete when DefectOfExactness arrives)
    
end );

##
InstallMethod( BasisOfModule,
        "for sets of generators of homalg modules",
        [ IsGeneratorsOfFinitelyGeneratedModuleRep and IsHomalgGeneratorsOfRightModule ],
        
  function( gen )
    local bas;
    
    if not IsBound( gen!.BasisOfModule ) then
        gen!.BasisOfModule := BasisOfColumns( MatrixOfGenerators( gen ) );
        SetCanBeUsedToDecideZeroEffectively( gen, false );
    fi;
    
    bas := HomalgGeneratorsForRightModule( gen!.BasisOfModule, HomalgRing( gen ) );
    
    SetCanBeUsedToDecideZeroEffectively( bas, true );
        
    return HomalgRelationsForRightModule( MatrixOfGenerators( bas ) );	## FIXME: written for \/ in Modules.gi (should become obsolete when DefectOfExactness arrives)
    
end );

##
## from: Modules.gi
##

##
InstallMethod( \/,				### defines: SubfactorModule (incomplete)
        "for homalg generators",
        [ IsGeneratorsOfFinitelyGeneratedModuleRep, IsGeneratorsOfFinitelyGeneratedModuleRep ],
        
  function( gen1, gen2 )
    local R, B, N, S;
    
    R := HomalgRing( gen1 );
    
    # basis of gen2
    B := BasisOfModule( gen2 );
    
    # normal forms of generators of gen1 with respect to B
    N := DecideZero( gen1, B );
    
    if IsHomalgGeneratorsOfLeftModule( gen1 ) then
        N := HomalgGeneratorsForLeftModule( N );
    else
        N := HomalgGeneratorsForRightModule( N );
    fi;
    
    # get a better basis for N
    N := GetRidOfObsoleteGenerators( N );
    
    # compute the syzygies module of N modulo B
    S := SyzygiesGenerators( N, B );
    
    return Presentation( S );
    
end );

## was part of _Functor_Cokernel_OnObjects

    if IsZero( phi ) then
        coker := Range( phi );
        epi := TheIdentityMorphism( coker );
        if not IsBound( coker!.NaturalEmbedding ) then
            coker!.NaturalEmbedding := epi;
        fi;
        SetCokernelEpi( phi, epi );
        return coker;	## this is crucial for IsIdenticalObj( Ext( 0, M, N ), Hom( M, N ) ) = true (we hope there is no need to set further attributes as below)
    fi;
    
## from HomalgComplex
##
InstallMethod( ViewObj,
        "for homalg complexes",
        [ IsComplexOfFinitelyPresentedObjectsRep and IsAcyclic ],
        
  function( o )
    local l, degrees;
    
    Print( "<An acyclic complex consisting of " );
    
    degrees := ObjectDegreesOfComplex( o );
    
    l := Length( degrees );
    
    if l = 1 then
        Print( "a single" );
    else
        Print( l );
    fi;
    
    if IsHomalgLeftObjectOrMorphismOfLeftObjects( o ) then
        Print( " left" );
    else
        Print( " right" );
    fi;
    
    if IsHomalgModule( CertainObject( o, degrees[1] ) ) then
        Print( " module" );
        if l > 1 then
            Print( "s" );
        fi;
    else
        if IsComplexOfFinitelyPresentedObjectsRep( CertainObject( o, degrees[1] ) ) then
            Print( " complex" );
        else
            Print( " cocomplex" );
        fi;
        if l > 1 then
            Print( "es" );
        fi;
    fi;
    
    Print( " at degree" );
    
    if l = 1 then
        Print( " ", degrees[1] );
    else
        Print( "s ", degrees );
    fi;
    
    Print( ">" );
    
end );

##
InstallMethod( ViewObj,
        "for homalg complexes",
        [ IsCocomplexOfFinitelyPresentedObjectsRep and IsAcyclic ],
        
  function( o )
    local l, degrees;
    
    Print( "<An acyclic cocomplex consisting of " );
    
    degrees := ObjectDegreesOfComplex( o );
    
    l := Length( degrees );
    
    if l = 1 then
        Print( "a single" );
    else
        Print( l );
    fi;
    
    if IsHomalgLeftObjectOrMorphismOfLeftObjects( o ) then
        Print( " left" );
    else
        Print( " right" );
    fi;
    
    if IsHomalgModule( CertainObject( o, degrees[1] ) ) then
        Print( " module" );
        if l > 1 then
            Print( "s" );
        fi;
    else
        if IsComplexOfFinitelyPresentedObjectsRep( CertainObject( o, degrees[1] ) ) then
            Print( " complex" );
        else
            Print( " cocomplex" );
        fi;
        if l > 1 then
            Print( "es" );
        fi;
    fi;
    
    Print( " at cohomology degree" );
    
    if l = 1 then
        Print( " ", degrees[1] );
    else
        Print( "s ", degrees );
    fi;
    
    Print( ">" );
    
end );

## from HomalgMatrix

    internal := false;
    
    if IsMatrix( M ) then
        internal := true;
    elif IsList( M ) and ForAll( M, a -> a = [ ] ) then	## this must remain above the next ifs
        internal := true;
    elif IsBound( HOMALG.OtherInternalMatrixTypes ) then
        for ar in HOMALG.OtherInternalMatrixTypes do
            internal := internal or ar( M );
            if internal then
                break;
            fi;
        od;
    fi;
    
## from BasicFunctors.gi

## install Cokernel for image squares (this should be installed automatically in the future)
InstallOtherMethod( Cokernel,
        "for homalg image squares",
        [ IsHomalgChainMap and IsImageSquare ],
  function( sq )
    local d, dS, dT, phi, muS, muT;
    
    d := DegreesOfChainMap( sq )[1];
    
    dS := LowestDegreeMorphismInComplex( Source( sq ) );
    dT := LowestDegreeMorphismInComplex( Range( sq ) );
    
    phi := CertainMorphism( sq, d );
    
    muS := NaturalEmbedding( Cokernel( dS ) );
    muT := NaturalEmbedding( Cokernel( dT ) );
    
    return CompleteImageSquare( muS, phi, muT );
    
end );

## install Kernel for kernel squares (this should be installed automatically in the future)
InstallOtherMethod( Kernel,
        "for homalg kernel squares",
        [ IsHomalgChainMap and IsKernelSquare ],
  function( sq )
    local d, dS, dT, phi, muS, muT;
    
    d := DegreesOfChainMap( sq )[1];
    
    dS := LowestDegreeMorphismInComplex( Source( sq ) );
    dT := LowestDegreeMorphismInComplex( Range( sq ) );
    
    phi := CertainMorphism( sq, d );
    
    muS := NaturalEmbedding( Kernel( dS ) );
    muT := NaturalEmbedding( Kernel( dT ) );
    
    return CompleteImageSquare( muS, phi, muT );
    
end );

## install DefectOfExactness for Lambek pair of squares (this should be installed automatically in the future)
InstallOtherMethod( DefectOfExactness,
        "for homalg Lambek pair of squares",
        [ IsHomalgChainMap and IsLambekPairOfSquares ],
  function( sq )
    local d, dS, dT, phi, muS, muT;
    
    d := DegreesOfChainMap( sq )[1];
    
    dS := AsATwoSequence( Source( sq ) );
    dT := AsATwoSequence( Range( sq ) );
    
    phi := CertainMorphism( sq, d );
    
    muS := NaturalEmbedding( DefectOfExactness( dS ) );
    muT := NaturalEmbedding( DefectOfExactness( dT ) );
    
    return CompleteImageSquare( muS, phi, muT );
    
end );

## install KernelEmb for kernel squares (this should be installed automatically in the future)
InstallOtherMethod( KernelEmb,
        "for homalg kernel squares",
        [ IsHomalgChainMap and IsKernelSquare ],
  function( sq )
    local d, dS, dT, phi, muS, muT, kappa;
    
    d := DegreesOfChainMap( sq )[1];
    
    dS := LowestDegreeMorphismInComplex( Source( sq ) );
    dT := LowestDegreeMorphismInComplex( Range( sq ) );
    
    phi := CertainMorphism( sq, d );
    
    muS := KernelEmb( dS );
    muT := KernelEmb( dT );
    
    kappa := CompleteImageSquare( muS, phi, muT );
    
    if IsComplexOfFinitelyPresentedObjectsRep( Source( sq ) ) then
        muS := HomalgComplex( muS, d + 1 );
        muT := HomalgComplex( muT, d + 1 );
        kappa := HomalgChainMap( kappa, muS, muT, d + 1 );
    else
        muS := HomalgCocomplex( muS, d - 1 );
        muT := HomalgCocomplex( muT, d - 1 );
        kappa := HomalgChainMap( kappa, muS, muT, d - 1 );
    fi;
    
    return kappa;
    
end );

